# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kR1VXgsrKgzmHRWYZdRwRTLSXdwuK8Er

# Membuat Model Sistem Rekomendasi (Content-Based Filtering) Menggunakan Dataset Dari [TMDB Movies Dataset](https://www.kaggle.com/datasets/ahsanaseer/top-rated-tmdb-movies-10k/data)

- **Nama:** Fahru Rahman
- **Email:** fhrurhmn@gmail.com
- **ID Dicoding:** mc009d5y0506

# Import Library Yang Dibutuhkan
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
import os
from collections import Counter
from wordcloud import WordCloud, STOPWORDS

"""# Data Loading"""

# upload dataset
file_path = '/content/top10K-TMDB-movies.csv'
if os.path.exists(file_path):
    print(f"File {file_path} ditemukan di session storage.")
    df = pd.read_csv(file_path)
else:
    print("File tidak ditemukan. Silakan unggah file top10K-TMDB-movies.csv")
    uploaded = files.upload()
    df = pd.read_csv('top10K-TMDB-movies.csv')

df.head()

""">menampilkan informasi dataset"""

df.info()

"""> mengecek missing value pada setiap kolom"""

print("\nJumlah Nilai Kosong per Kolom:")
print(df.isnull().sum())

"""> mengecek data duplikat"""

print("\nJumlah Duplicated:")
print(df.duplicated().sum())

"""# EDA"""

# Plot distribusi rating
plt.figure(figsize=(10, 6))
sns.histplot(df['vote_average'], bins=20, kde=True, color='skyblue')
plt.title('Distribusi Rating Film', fontsize=14)
plt.xlabel('Vote Average')
plt.ylabel('Jumlah Film')
plt.grid(True)
plt.show()

"""> Terlihat bahwa rata rata film memiliki rating 6.5 hingga 7.5 yang mencerminkan dataset berisi film film yang cukup bagus"""

# Pisahkan genre
genre_split = df['genre'].dropna().apply(lambda x: x.split(','))
genre_counts = Counter([g.strip() for sublist in genre_split for g in sublist])
genre_df = pd.DataFrame(genre_counts.items(), columns=['Genre', 'Jumlah']).sort_values(by='Jumlah', ascending=False)

# Plot 10 genre terpopuler
plt.figure(figsize=(10, 6))
sns.barplot(data=genre_df.head(10), x='Jumlah', y='Genre', palette='viridis')
plt.title('10 Genre Film Terpopuler')
plt.xlabel('Jumlah Film')
plt.ylabel('Genre')
plt.grid(True)
plt.show()

"""> terlihat dari grafik tersebut bahwa genre film yang terpopuler adalah drama, diikuti oleh comedy dan thriller"""

# Gabungkan semua overview
text = ' '.join(df['overview'].dropna().tolist())

# Buat WordCloud
wordcloud = WordCloud(width=800, height=400, background_color='white', stopwords=STOPWORDS).generate(text)

plt.figure(figsize=(15, 7))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('WordCloud dari Overview Film', fontsize=16)
plt.show()

"""# Data Pre-Processing"""

df['overview'] = df['overview'].fillna('')
df['genre'] = df['genre'].fillna('')
print("\nJumlah Nilai Kosong Setelah Pengisian:")
print(df.isnull().sum())

"""

> Mengisi nilai kosong dengan string kosong lebih baik daripada menghapus baris karena memungkinkan semua 10.000 film tetap ada dalam sistem rekomendasi tanpa kehilangan film yang mungkin relevan.

"""

# menggabungkan genre dan overview
df['combined_features'] = df['genre'] + ' ' + df['overview']

# menampilkan 5 baris pertama dari kolom baru
display(df[['title', 'combined_features']].head())

"""

> Kolom genre dan overview digabung agar sistem rekomendasi bisa lebih akurat mengenali kemiripan film berdasarkan tema dan deskripsi ceritanya.

"""

# TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['combined_features'])
print("\nUkuran Matriks TF-IDF:", tfidf_matrix.shape)

"""> TF-IDF mengubah teks menjadi angka agar sistem rekomendasi bisa mengukur kemiripan antar film berdasarkan kata-kata penting.

# Modelling
"""

# Cosine Similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
print("\nUkuran Matriks Cosine Similarity:", cosine_sim.shape)
print("\nContoh Skor Kemiripan untuk Film Pertama:")
print(cosine_sim[0][:5])

# Ubah cosine similarity ke DataFrame
cosine_sim_df = pd.DataFrame(
    cosine_sim,
    index=df['title'],   # baris: judul film
    columns=df['title']  # kolom: judul film
)

# Tampilkan 5 baris pertama sebagai sampel
print("\nContoh DataFrame Cosine Similarity:")
cosine_sim_df.iloc[:5, :5]

"""> Pada tahap cosine similarity, kemiripan antar film dihitung dengan mengukur sudut antara vektor TF-IDF masing-masing film, menghasilkan matriks 10.000 x 10.000 yang menunjukkan seberapa mirip setiap pasangan film berdasarkan konten teksnya.

# Fungsi Rekomendasi
"""

def get_recommendations(title, cosine_sim=cosine_sim):
    # Mengecek apakah judul film yang diminta ada di dataset
    if title not in df['title'].values:
        return f"Film {title} tidak ditemukan di dataset."

    # Mengambil index dari film yang sesuai dengan judul
    idx = df[df['title'] == title].index[0]

    # Mengambil skor kemiripan (cosine similarity) antara film tersebut dengan semua film lain
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Mengurutkan daftar skor kemiripan dari yang paling tinggi ke paling rendah
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Mengambil 10 film teratas dengan kemiripan tertinggi, kecuali film itu sendiri (urutan pertama)
    sim_scores = sim_scores[1:11]

    # Mengambil index dari 10 film yang paling mirip
    movie_indices = [i[0] for i in sim_scores]

    # Mengambil nilai skor kemiripan dari 10 film tersebut
    similarity_scores = [i[1] for i in sim_scores]

    # Mengambil informasi judul, genre, dan rating dari film-film rekomendasi
    result = df[['title', 'genre', 'vote_average']].iloc[movie_indices].copy()

    # Menambahkan kolom skor kemiripan ke DataFrame hasil rekomendasi
    result['similarity_score'] = similarity_scores

    # Mengembalikan DataFrame berisi 10 film rekomendasi beserta skor kemiripannya
    return result

"""

> Fungsi get_recommendations menerima judul film, memeriksa keberadaannya di dataset, lalu mengembalikan 10 film paling mirip berdasarkan skor cosine similarity dari matriks TF-IDF, dengan menampilkan judul, genre, dan rating rata-rata.

"""

# menguji rekomendasi
test_titles = ['Midsommar', 'RoboCop', 'Parasite']
for title in test_titles:
    print(f"\nRekomendasi untuk '{title}':")
    display(get_recommendations(title))

"""# Evaluasi

### Fungsi untuk menghitung precision@k secara otomatis
"""

def calculate_precision_at_k(recommended_movies, relevant_movies, k):
    # Ambil K item teratas dari rekomendasi
    top_k = recommended_movies[:k]

    # Hitung jumlah item relevan dalam top-K
    relevant_in_top_k = len(set(top_k) & set(relevant_movies))

    # Hitung Precision@K
    precision = relevant_in_top_k / k if k > 0 else 0

    return precision

def evaluate_recommendations(movie_title, df, k=10):
    # Dapatkan rekomendasi dari fungsi get_recommendations
    recommendations = get_recommendations(movie_title)
    recommended_titles = recommendations['title'].tolist()

    # Film relevan adalah film dengan genre yang sama dengan film input
    movie_genre = df[df['title'] == movie_title]['genre'].iloc[0].split(',')
    relevant_movies = df[df['genre'].apply(lambda x: any(g in x for g in movie_genre))]['title'].tolist()

    # Hitung Precision@K
    precision = calculate_precision_at_k(recommended_titles, relevant_movies, k)
    print(f"Precision@{k} untuk '{movie_title}': {precision:.2f}")
    return precision

precision = evaluate_recommendations('Midsommar', df, k=10)
precision = evaluate_recommendations('RoboCop', df, k=10)
precision = evaluate_recommendations('Parasite', df, k=10)

